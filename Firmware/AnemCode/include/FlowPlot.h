#ifndef FlowPlot_h
#define FlowPlot_h


template <uint8_t _counts>
class FlowPlot {
private:
    uint8_t counter_;           //текущая позиция заполнения массивов
    uint16_t flow_sum_;         //накопительная сумма для среднего значения скорости
    uint8_t points_[_counts];   //массив значений, пересчитанный в точки графика (расстояние точки от верхней границы)
    uint16_t values_[_counts];  //массив значений скоростей потока в целых, т.е. скорость * 10
    uint16_t mean_flow_;        //Среднее начение отсчетов на графике
    uint8_t height_;            //высота графика в точках, необходима для пересчета скорости в точки графика
    uint16_t v_min_range_;      //значение скорости для нижней границы графика
    uint16_t v_max_range_;      //значение скорости для верхней границы графика
    boolean auto_expand_;       //признак автоматического расширения значений границ в зависимости от отсчетов

    // Расчет высоты точки в пикселях от верхнего края. 
    // Если значение потока выходит за пределы границ, точка ставится на границе
    uint8_t get_point_height(uint16_t _flow); 

public:
    FlowPlot();
    ~FlowPlot();

    // инициализация начальных значений
    // _v_min - значение потока, соответствующее нижней границе графика
    // _v_max - значение потока, соответствующее верхней границе графика
    // _auto_expand - расширение границ графика, если полученное значение потока выходит за границы
    // если макс.поток не больше минимального, то _auto_expand устанавливается принудительно
    bool init(uint8_t _height, float _v_min = 0, float _v_max = 0, boolean _auto_expand = false);   

    // Добавление отсчета потока в массив, перерасчет точек при автоизменении границ. Расчет среднего значения (сумма потоков/ количество отсчетов в массиве)
    // При заполненном массиве содержимое сдвигается влево, новое значение пишется в последний элемент. 
    void pushValue(float _flow);

    //фиксированные границы (false), расширяемые границы (true)
    void setAutoexpand(boolean _auto_expand);                                                       

    //получение среднего значения скорости
    float getMeanFlow(void);                                                                        
    
    //получение текущего значения для нижней границы графика
    float getMinRange(void);                                                                        
    
    //получение текущего значения для верхней границы графика
    float getMaxRange(void);                                                                        

    //Задание значений для верхней и нихней границы графика
    //При задании дробных значений потоков верхняя граница округляется вверх до целых м/с, для нижней границы - вниз
    //если макс.поток не больше минимального, то _auto_expand устанавливается принудительно, значение для вехней границы берется на 1м/с больше нижней
    bool setRanges(float _v_min, float _v_max);                                                     

    //очистка данных
    void clearData(void);                                                                           
    
    //возвращает указатель на массив значений потоков (в ед. 0.1 м/с)
    const uint8_t* getFlows(void) const;                                                            
    
    //возвращает указатель на массив значений точек (расстояний в пикселях от верхней границы графика)
    const uint8_t* getPoints(void) const;                                                           
};
#endif


